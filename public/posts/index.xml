<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Taylor Fahlman</title>
    <link>https://fahlman.dev/posts/</link>
    <description>Recent content in Posts on Taylor Fahlman</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 24 Mar 2021 11:51:25 -0700</lastBuildDate><atom:link href="https://fahlman.dev/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Using an existing VPC with OpenShift</title>
      <link>https://fahlman.dev/posts/byoc-vpc-openshift/</link>
      <pubDate>Wed, 24 Mar 2021 11:51:25 -0700</pubDate>
      
      <guid>https://fahlman.dev/posts/byoc-vpc-openshift/</guid>
      <description>OpenShift Dedicated recently enabled installing an OpenShift cluster into an existing AWS VPC (aka BYO VPC). While testing this out, I couldnâ€™t find much documentation around how the VPC should be set up other than a few points:
The VPC should have dnsHostnames enabled There should be a public subnet (per AZ the cluster is in) There should be a private subnet (per AZ the cluster is in) The first point is fairly straight forward, but the other two are somewhat vauge.</description>
    </item>
    
    <item>
      <title>Using Mattermost as a receiver for Alertmanager</title>
      <link>https://fahlman.dev/posts/old/2018/using_mattermost_as_a_receiver_for_alertmanager/</link>
      <pubDate>Wed, 01 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://fahlman.dev/posts/old/2018/using_mattermost_as_a_receiver_for_alertmanager/</guid>
      <description>While working to move to Prometheus and Alertmanager for our monitoring lately, my team discovered that the generic webhook_config in Alertmanager does not work with a Mattermost webhook. The JSON included in the POST from Alertmanager causes Mattermost to return a 400, and the lack of flexibility in Alertmanager leaves a lot to be desired. Luckily, Mattermost webhooks translate Slack webhooks natively (according to the documentation here), and Alertmanager natively supports Slack with a slack_config.</description>
    </item>
    
    <item>
      <title>Graphing SNMP data with Prometheus and Grafana</title>
      <link>https://fahlman.dev/posts/old/2017/graphing_snmp_data_with_prometheus_and_grafana/</link>
      <pubDate>Fri, 04 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://fahlman.dev/posts/old/2017/graphing_snmp_data_with_prometheus_and_grafana/</guid>
      <description>Graphing SNMP data with Prometheus and Grafana This summer, I&#39;ve been an intern on the Infrastructure team at CoreOS, and this week marks the halfway point. I&#39;ve been learning lots and doing some really interesting work. My latest project revolves around getting some metrics about the office network set up, using SNMP, Prometheus and Grafana.
SNMP The first step was learning about SNMP. For those of you who haven&#39;t heard of SNMP before, it&#39;s a protocol that came about in the late 80&#39;s, used for getting and modifying information about a managed device.</description>
    </item>
    
    <item>
      <title>Travis and SFML</title>
      <link>https://fahlman.dev/posts/old/2017/travis_and_sfml/</link>
      <pubDate>Fri, 12 May 2017 00:00:00 +0000</pubDate>
      
      <guid>https://fahlman.dev/posts/old/2017/travis_and_sfml/</guid>
      <description>I currently work at the Open Source Lab as a Student System Admin, and will soon be interning on the Infrastructure team at CoreOS . So I like automating things, especially testing and building. One of the more annoying things about using a framework like SFML is that there is not a lot of documentation on testing them. Don&#39;t get me wrong, I&#39;m really loving SFML and its community, especially the IRC channel.</description>
    </item>
    
    <item>
      <title>Animation</title>
      <link>https://fahlman.dev/posts/old/2016/animation/</link>
      <pubDate>Mon, 19 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://fahlman.dev/posts/old/2016/animation/</guid>
      <description>An animation handler is decently hard to write, especially when working with objects instead of directly with sprites, so I opted to use the Thor library. It has some great tools and tutorials. I think I&#39;ll also use the action handling component of Thor in the future, but for now I&#39;m just using the Animation component.
Before this, I manually moved the sprite&#39;s position every time I pressed an arrow key.</description>
    </item>
    
    <item>
      <title>Sprite Rendering and State Handling</title>
      <link>https://fahlman.dev/posts/old/2016/sprite_rendering_and_state_handling/</link>
      <pubDate>Mon, 12 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://fahlman.dev/posts/old/2016/sprite_rendering_and_state_handling/</guid>
      <description>Sprite Rendering and State Handling After a long hiatus (thanks to a 19 credit term), I&#39;m back to working on the game. Textures and sprites now can be loaded and drawn pretty easily. Chaning between the states is now smoothly handled after I removed a bug. Now I can start the game in a menu, click on a button, transition to the &#39;gameplay&#39; and render a sprite that changes when pressing the direction keys.</description>
    </item>
    
    <item>
      <title>Rust Syntax Highlighting in Vim</title>
      <link>https://fahlman.dev/posts/old/2015/rust_syntax_highlighting_in_vim/</link>
      <pubDate>Fri, 20 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>https://fahlman.dev/posts/old/2015/rust_syntax_highlighting_in_vim/</guid>
      <description>I use Vim on a daily basis, and now that I&#39;m learning Rust, I wanted syntax highlighting. There are some great tools out there, but the instructions to get them to work are broken up a bit. Here are the best instructions I found in one place.
First, you&#39;ll need Vundle if you don&#39;t have it. Vundle is a great tool for Vim, managing plugins and making them configurable in your .</description>
    </item>
    
    <item>
      <title>Enable Rust on OSU Servers</title>
      <link>https://fahlman.dev/posts/old/2015/enable_rust_on_osu_servers/</link>
      <pubDate>Tue, 17 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>https://fahlman.dev/posts/old/2015/enable_rust_on_osu_servers/</guid>
      <description>Rust was recently installed on flip{1-3} at Oregon State. In order to use it, you must first add the path to the library to your LD_LIBRARY_PATH:
export LD_LIBRARY_PATH=/usr/local/apps/rust/lib:$LD_LIBRARY_PATH Now add the Rust binary directory path to your $PATH. This is needed for cargo to work:
export PATH=$PATH:/usr/local/apps/rust-1.4.0/bin/ Now you just need to alias rustc and cargo to the full paths:
alias rustc=&amp;quot;/usr/local/apps/rust-1.4.0/bin/rustc&amp;quot; alias cargo=&amp;quot;/usr/local/apps/rust-1.4.0/bin/cargo&amp;quot; Happy Rusting</description>
    </item>
    
    <item>
      <title>Useful OpenSSL Commands</title>
      <link>https://fahlman.dev/posts/old/2015/useful_ssl_openssl_commands/</link>
      <pubDate>Fri, 18 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>https://fahlman.dev/posts/old/2015/useful_ssl_openssl_commands/</guid>
      <description>Here a few useful commands I found when working with certs lately
Covert a pfx file into a pem:
openssl pkcs12 -in foo.pfx -out foo.pem -nodes Extract the key out of a pem:
openssl pkey -in foo.pem -out foo.key Extrct CA cert chain out of a pem:
openssl crl2pkcs7 -nocrl -certfile foo.pem | openssl pkcs7 -print_certs -out foo.chain.crt Extract cert out of a pem:
openssl x509 -in foo.pem -outform DER -out foo.</description>
    </item>
    
  </channel>
</rss>
